{"within":[{"name":"Buildings.Fluid"}],"class_definition":[{"class_prefixes":{"prefix":"package"},"class_specifier":{"long_class_specifier":{"name":"Interfaces","comment":{"string":"\"Package with interfaces for fluid models\""},"composition":{"element_list":{"element":[{"extends_clause":{"name":{"name":"Modelica.Icons.InterfacesPackage"}}},{"class_definition":{"class_prefixes":{"prefix":"package"},"class_specifier":{"long_class_specifier":{"name":"UsersGuide","comment":{"string":"\"User\u0027s Guide\""},"composition":{"element_list":{"element":[{"extends_clause":{"name":{"name":"Modelica.Icons.Information"}}}]},"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"preferredView"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"info\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cp\u003e\nThe package \u003ccode\u003eBuildings.Fluid.Interface\u003c/code\u003e consists of basic\nclasses that can be used by developers to create new component models.\n\u003c/p\u003e\n\u003cp\u003e\nThe classes whose name contains \u003ccode\u003eTwoPort\u003c/code\u003e or\n\u003ccode\u003eFourPort\u003c/code\u003e can be used for components with\ntwo or four fluid ports, respectively. If a class name contains\n\u003ccode\u003eStatic\u003c/code\u003e, then it can only be used for a steady-state model.\nOtherwise, it may be used for a steady-state or a dynamic model.\n\u003c/p\u003e\n\u003cp\u003e\nThe most basic classes are the records\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters\\\"\u003e\nBuildings.Fluid.Interfaces.TwoPortFlowResistanceParameters\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.FourPortFlowResistanceParameters\\\"\u003e\nBuildings.Fluid.Interfaces.FourPortFlowResistanceParameters\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.LumpedVolumeDeclarations\\\"\u003e\nBuildings.Fluid.Interfaces.LumpedVolumeDeclarations\u003c/a\u003e.\nThese define parameters that are needed by many fluid flow components.\n\u003c/p\u003e\n\n\u003cp\u003e\nNext, we describe the basic classes. For a more detailed description,\nsee the \u003ci\u003einfo\u003c/i\u003e section of the class.\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n  \u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.ConservationEquation\\\"\u003e\n      Buildings.Fluid.Interfaces.ConservationEquation\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003e\n      This is a basic model for an ideally mixed fluid volume.\n      It implements conservation equations for mass and energy.\n      The conservation equations can be dynamic or steady-state.\n      The model can have an arbitrary number of fluid ports.\n      Models that instanciate this model need to define the input\n      \u003ccode\u003efluidVolume\u003c/code\u003e, which is the actual volume occupied by the fluid.\n      For most components, this can be set to a parameter. However, for components such as\n      expansion vessels, the fluid volume can change in time.\n      \u003c/p\u003e\n\n      The model has the following input connectors:\u003cbr/\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eQ_flow\u003c/code\u003e, which is the sensible plus latent heat flow rate added to the medium, and\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emXi_flow\u003c/code\u003e, which is the species mass flow rate added to the medium.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n  \u003cp\u003e\n  Models that instanciate this model can used these connectors to interface with the conservation equations.\n  \u003c/p\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation\\\"\u003e\n      Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003e\n      This is a basic model for steady-state conservation equations\n      for mass and energy of a component with two fluid ports.\n      \u003c/p\u003e\n\n      The model has the following input connectors:\u003cbr/\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eQ_flow\u003c/code\u003e, which is the sensible plus latent heat flow rate added to the medium, and\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emXi_flow\u003c/code\u003e, which is the species mass flow rate added to the medium.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n  \u003cp\u003e\n  Models that instanciate this model can used these connectors to interface with the conservation equations.\n  \u003c/p\u003e\n \u003cp\u003e\n  Compared to\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.ConservationEquation\\\"\u003e\n      Buildings.Fluid.Interfaces.ConservationEquation\u003c/a\u003e\n  this model provides a more efficient implementation of the steady-state conservation equations for\n  models with two fluid ports.\n  \u003c/p\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialFourPort\\\"\u003e\n                          Buildings.Fluid.Interfaces.PartialFourPort\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n     This model defines an interface for components with four ports.\n     Only parameters and fluid definitions are provided, but no\n     equations.\n     The model is identical to\n     \u003ca href\u003d\\\"modelica://Modelica.Fluid.Interfaces.PartialTwoPort\\\"\u003e\n     Modelica.Fluid.Interfaces.PartialTwoPort\u003c/a\u003e, except that it has\n     four ports.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PrescribedOutlet\\\"\u003e\n                         Buildings.Fluid.Interfaces.PrescribedOutlet\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    This model calculates a prescribed heat flow (e.g. for an ideal heater or cooler),\n    depending on a set temperature \u003ccode\u003eTSet\u003c/code\u003e.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialTwoPortInterface\\\"\u003e\n                          Buildings.Fluid.Interfaces.PartialTwoPortInterface\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n     This model defines the interface for component models that transport\n     fluid, and that can exchange heat and mass.\n     It also defines the port pressure difference as\n     \u003ci\u003e\u0026Delta;p \u003d p\u003csub\u003ea\u003c/sub\u003e-p\u003csub\u003eb\u003c/sub\u003e\u003c/i\u003e. However, no equation is\n     implemented to compute \u003ci\u003e\u0026Delta;p(\u0026sdot;)\u003c/i\u003e as a function of the\n     mass flow rate. The model also implements equations to obtain the\n     thermodynamic state at the ports.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialFourPortInterface\\\"\u003e\n                          Buildings.Fluid.Interfaces.PartialFourPortInterface\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n     This model is identical to\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialTwoPortInterface\\\"\u003e\n                          Buildings.Fluid.Interfaces.PartialTwoPortInterface\u003c/a\u003e\n     but it can be used for components with four fluid ports.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\n                          Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n     This model implements the pressure drop as a function of the mass flow rate.\n     It also implements the steady-state energy and mass conservation\n     equations. However, it does not implement an equation that computes\n     \u003ccode\u003eQ_flow\u003c/code\u003e, the\n     sensible and latent heat transfer to the medium flow, nor\n     does it implement an equation for \u003ccode\u003emXi_flow\u003c/code\u003e,\n     the species mass flow rate added to or removed from the medium.\n     Models that extend this model need to provide equations\n     for \u003ccode\u003eQ_flow\u003c/code\u003e and \u003ccode\u003emXi_flow\u003c/code\u003e.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger\\\"\u003e\n                          Buildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n     This model is identical to\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\n                          Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/a\u003e\n     except that it has four ports.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\\\"\u003e\n                          Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n     This model implements the pressure drop as a function of the mass flow rate.\n     It also implements the energy and mass conservation equations, which may be\n     configured as steady-state or dynamic balances based on a parameter.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.FourPortHeatMassExchanger\\\"\u003e\n                          Buildings.Fluid.Interfaces.FourPortHeatMassExchanger\u003c/a\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n     This model is identical to\n     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\\\"\u003e\n                          Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\u003c/a\u003e\n     except that it has four ports.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}}]},"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"preferredView"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"info\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cp\u003e\nThis package contains basic classes that are used to build\ncomponent models that change the state of the\nfluid. The classes are not directly usable, but can\nbe extended when building a new model.\n\u003c/p\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}]}