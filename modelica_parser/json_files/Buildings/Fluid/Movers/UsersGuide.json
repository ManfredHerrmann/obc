{"within":[{"name":"Buildings.Fluid.Movers"}],"class_definition":[{"class_prefixes":{"prefix":"package"},"class_specifier":{"long_class_specifier":{"name":"UsersGuide","comment":{"string":"\"User\u0027s Guide\""},"composition":{"element_list":{"element":[{"extends_clause":{"name":{"name":"Modelica.Icons.Information"}}}]},"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"preferredView"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"info\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cp\u003e\nThis package contains models for fans and pumps. The same models\nare used for fans or pumps.\n\u003c/p\u003e\n\n\u003ch4\u003eModel description\u003c/h4\u003e\n\u003cp\u003eA detailed description of the fan and pump models can be\nfound in\n\u003ca href\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Movers/UsersGuide/2013-IBPSA-Wetter.pdf\\\"\u003eWetter (2013)\u003c/a\u003e.\nThe models are implemented as described in this paper, except\nthat equation (20) is no longer used. The reason is that\nthe transition (24) caused the derivative\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n d \u0026Delta;p(r(t), V(t)) \u0026frasl; d r(t)\n\u003c/p\u003e\n\u003cp\u003e\nto have an inflection point in the regularization region\n\u003ci\u003er(t) \u0026isin; (\u0026delta;/2, \u0026delta;)\u003c/i\u003e.\nThis caused some models to not converge.\nTo correct this, for \u003ci\u003er(t) \u0026lt; \u0026delta;\u003c/i\u003e,\nthe term \u003ci\u003eV(t) \u0026frasl; r(t)\u003c/i\u003e in (16)\nhas been modified so that (16) can be used for any\nvalue of \u003ci\u003er(t)\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nBelow, the models are briefly described.\n\u003c/p\u003e\n\u003ch5\u003ePerformance data\u003c/h5\u003e\n\u003cp\u003e\nThe models use\nperformance curves that compute pressure rise,\nelectrical power draw and efficiency as a function\nof the volume flow rate and the speed.\nThe following performance curves are implemented:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eIndependent variable\u003c/th\u003e\n\u003cth\u003eDependent variable\u003c/th\u003e\n\u003cth\u003eRecord for performance data\u003c/th\u003e\n\u003cth\u003eFunction\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eVolume flow rate\u003c/td\u003e\n\u003ctd\u003ePressure\u003c/td\u003e\n\u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters\\\"\u003e\nflowParameters\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.pressure\\\"\u003e\npressure\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eVolume flow rate\u003c/td\u003e\n\u003ctd\u003eEfficiency\u003c/td\u003e\n\u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.efficiencyParameters\\\"\u003e\nefficiencyParameters\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.efficiency\\\"\u003e\nefficiency\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eVolume flow rate\u003c/td\u003e\n\u003ctd\u003ePower*\u003c/td\u003e\n\u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.powerParameters\\\"\u003e\npowerParameters\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.power\\\"\u003e\npower\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e*Note: This record should not be used\n(i.e. \u003ccode\u003euse_powerCharacteristic\u003c/code\u003e should be \u003ccode\u003efalse\u003c/code\u003e)\nfor the movers that take as a control signal\nthe mass flow rate or the head,\nunless also values for the record \u003ccode\u003epressure\u003c/code\u003e are provided.\nThe reason is that for these movers the record \u003ccode\u003epressure\u003c/code\u003e\nis required to be able to compute the mover speed,\nwhich is required to be able to compute the electrical power\ncorrectly using similarity laws.\nIf a \u003ccode\u003ePressure\u003c/code\u003e record is not provided,\nthe model will internally override \u003ccode\u003euse_powerCharacteristic\u003dfalse\u003c/code\u003e.\nIn this case the efficiency records will be used.\nNote that in this case an error is still introduced,\nbut it is smaller than when using the power records.\nCompare\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Validation.PowerSimplified\\\"\u003e\nBuildings.Fluid.Movers.Validation.PowerSimplified\u003c/a\u003e\nwith\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Validation.PowerSimplified\\\"\u003e\nBuildings.Fluid.Movers.Validation.PowerSimplified\u003c/a\u003e\nfor an illustration of this error.\n\u003c/p\u003e\n\u003cp\u003e\nThese performance curves are implemented in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics\\\"\u003e\nBuildings.Fluid.Movers.BaseClasses.Characteristics\u003c/a\u003e,\nand are used in the performance records in the package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data\\\"\u003e\nBuildings.Fluid.Movers.Data\u003c/a\u003e.\nThe package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data\\\"\u003e\nBuildings.Fluid.Movers.Data\u003c/a\u003e\ncontains different data records.\n\u003c/p\u003e\n\u003ch5\u003eModels that use performance curves for pressure rise\u003c/h5\u003e\n\u003cp\u003e\nThe models\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.SpeedControlled_y\\\"\u003e\nBuildings.Fluid.Movers.SpeedControlled_y\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.SpeedControlled_Nrpm\\\"\u003e\nBuildings.Fluid.Movers.SpeedControlled_Nrpm\u003c/a\u003e\ntake as an input either a control signal between \u003ci\u003e0\u003c/i\u003e and \u003ci\u003e1\u003c/i\u003e, or the\nrotational speed in units of \u003ci\u003e[1/min]\u003c/i\u003e. From this input and the current flow rate,\nthey compute the pressure rise.\nThis pressure rise is computed using a user-provided list of operating points that\ndefines the fan or pump curve at full speed.\nFor other speeds, similarity laws are used to scale the performance curves, as\ndescribed in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.pressure\\\"\u003e\nBuildings.Fluid.Movers.BaseClasses.Characteristics.pressure\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nFor example, suppose a pump needs to be modeled whose pressure versus flow relation crosses, at\nfull speed, the points shown in the table below.\n\u003c/p\u003e\n  \u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e\n      \u003cth\u003eVolume flow rate [m\u003csup\u003e3\u003c/sup\u003e\u0026frasl;h] \u003c/th\u003e\n      \u003cth\u003eHead [Pa]\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e0.0003\u003c/td\u003e\n      \u003ctd\u003e45000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e0.0006\u003c/td\u003e\n      \u003ctd\u003e35000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e0.0008\u003c/td\u003e\n      \u003ctd\u003e15000\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/table\u003e\n\u003cp\u003e\nThen, a declaration would be\n\u003c/p\u003e\n\u003cpre\u003e\n  Buildings.Fluid.Movers.SpeedControlled_y pum(\n    redeclare package Medium \u003d Medium,\n    per.pressure(V_flow\u003d{0.0003,0.0006,0.0008},\n                 dp    \u003d{45,35,15}*1000))\n    \\\"Circulation pump\\\";\n\u003c/pre\u003e\n\n\u003cp\u003e\nThis will model the following pump curve for the pump input signal \u003ccode\u003ey\u003d1\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Movers/UsersGuide/pumpCurve.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003ch5\u003eModels that directly control the head or the mass flow rate\u003c/h5\u003e\n\u003cp\u003e\nThe models \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_dp\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_dp\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_m_flow\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_m_flow\u003c/a\u003e\ntake as an input the pressure difference or the mass flow rate.\nThis pressure difference or mass flow rate will be provided by the fan or pump,\ni.e., the fan or pump has idealized perfect control and infinite capacity.\nUsing these models that take as an input the head or the mass flow rate often leads\nto smaller system of equations compared to using the models that take\nas an input the speed.\n\u003c/p\u003e\n\u003cp\u003e\nThese models can be configured for three different control inputs.\nFor\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_dp\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_dp\u003c/a\u003e,\nthe head is as follows:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003einputType\u003d\u003dBuildings.Fluid.Types.InputType.Continuous\u003c/code\u003e,\nthe head is \u003ccode\u003edp\u003ddp_in\u003c/code\u003e, where \u003ccode\u003edp_in\u003c/code\u003e is an input connector.\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003einputType\u003d\u003dBuildings.Fluid.Types.InputType.Constant\u003c/code\u003e,\nthe head is \u003ccode\u003edp\u003dconstantHead\u003c/code\u003e, where \u003ccode\u003econstantHead\u003c/code\u003e is a parameter.\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003einputType\u003d\u003dBuildings.Fluid.Types.InputType.Stages\u003c/code\u003e,\nthe head is \u003ccode\u003edp\u003dheads\u003c/code\u003e, where \u003ccode\u003eheads\u003c/code\u003e is a\nvectorized parameter. For example, if a mover has\ntwo stages and the head of the first stage should be \u003ci\u003e60%\u003c/i\u003e of the nominal head\nand the second stage equal to \u003ccode\u003edp_nominal\u003c/code\u003e, set\n\u003ccode\u003eheads\u003d{0.6, 1}*dp_nominal\u003c/code\u003e.\nThen, the mover will have the following heads:\n\u003c/p\u003e\n  \u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e\n      \u003cth\u003einput signal \u003ccode\u003estage\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003eHead [Pa]\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0.6*dp_nominal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003edp_nominal\u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nSimilarly, for\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_m_flow\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_m_flow\u003c/a\u003e,\nthe mass flow rate is as follows:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003einputType\u003d\u003dBuildings.Fluid.Types.InputType.Continuous\u003c/code\u003e,\nthe mass flow rate is \u003ccode\u003em_flow\u003dm_flow_in\u003c/code\u003e, where \u003ccode\u003em_flow_in\u003c/code\u003e is an input connector.\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003einputType\u003d\u003dBuildings.Fluid.Types.InputType.Constant\u003c/code\u003e,\nthe mass flow rate is \u003ccode\u003em_flow\u003dconstantMassFlowRate\u003c/code\u003e, where \u003ccode\u003econstantMassFlowRate\u003c/code\u003e is a parameter.\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003einputType\u003d\u003dBuildings.Fluid.Types.InputType.Stages\u003c/code\u003e,\nthe mass flow rate is \u003ccode\u003em_flow\u003dmassFlowRates\u003c/code\u003e, where \u003ccode\u003emassFlowRates\u003c/code\u003e is a\nvectorized parameter. For example, if a mover has\ntwo stages and the mass flow rate of the first stage should be \u003ci\u003e60%\u003c/i\u003e of the nominal mass flow rate\nand the second stage equal to \u003ccode\u003em_flow_nominal\u003c/code\u003e, set\n\u003ccode\u003emassFlowRates\u003d{0.6, 1}*m_flow_nominal\u003c/code\u003e.\nThen, the mover will have the following mass flow rates:\n\u003c/p\u003e\n  \u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e\n      \u003cth\u003einput signal \u003ccode\u003estage\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003eMass flow rates [kg/s]\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0.6*m_flow_nominal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003em_flow_nominal\u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThese two models do not need to use a performance curve for the flow\ncharacteristics.\nThe reason is that\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nfor given pressure rise (or mass flow rate), the mass flow rate (or pressure rise)\nis computed from the flow resistance of the duct or piping network, and\n\u003c/li\u003e\n\u003cli\u003e\nat zero pressure difference, solving for the flow rate and the revolution leads to a singularity.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nHowever, the computation of the electrical power consumption\nrequires the mover speed to be known\nand the computation of the mover speed requires the performance\ncurves for the flow and efficiency/power characteristics.\nTherefore these performance curves do need to be provided\nif the user desires a correct electrical power computation.\nIf the curves are not provided, a simplified computation is used,\nwhere the efficiency curve is used and assumed to be correct for all speeds.\nThis loss of accuracy has the advantage that it allows to use the\nmover models without requiring flow and efficiency/power characteristics.\n\u003c/p\u003e\n\u003cp\u003e\nThe model \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_dp\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_dp\u003c/a\u003e\nhas an option to control the mover such\nthat the pressure difference set point is obtained\nacross two remote points in the system.\nTo use this functionality\nparameter \u003ccode\u003eprescribeSystemPressure\u003c/code\u003e has\nto be enabled and a differential pressure measurement\nmust be connected to\nthe pump input \u003ccode\u003edpMea\u003c/code\u003e.\nThis functionality is demonstrated in\n\u003ca href\u003d\\\"Buildings.Fluid.Movers.Validation.FlowControlled_dpSystem\\\"\u003e\nBuildings.Fluid.Movers.Validation.FlowControlled_dpSystem\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe models \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_dp\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_dp\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_m_flow\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_m_flow\u003c/a\u003e\nboth have a parameter \u003ccode\u003em_flow_nominal\u003c/code\u003e. For\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_m_flow\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_m_flow\u003c/a\u003e, this parameter\nis used for convenience to set a default value for the parameters\n\u003ccode\u003econstantMassFlowRate\u003c/code\u003e and\n\u003ccode\u003emassFlowRates\u003c/code\u003e.\nFor both models, the value is also used for the following:\n\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\nTo compute the\nsize of the fluid volume that can be used to approximate the\ninertia of the mover if the energy dynamics is selected to be dynamic.\n\u003c/li\u003e\n\u003cli\u003e\nTo compute a default pressure curve if no pressure curve has been specified\nin the record \u003ccode\u003eper.pressure\u003c/code\u003e.\nThe default pressure curve is the line that intersects\n\u003ccode\u003e(dp, V_flow) \u003d (dp_nominal, 0)\u003c/code\u003e and\n\u003ccode\u003e(dp, V_flow) \u003d (m_flow_nominal/rho_default, 0)\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nTo regularize the equations near zero flow rate to ensure a numerically\nrobust model.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nHowever, otherwise \u003ccode\u003em_flow_nominal\u003c/code\u003e does not affect the mass flow rate of the mover as\nthe mass flow rate is determined by the input signal or the above explained parameters.\n\u003c/p\u003e\n\u003ch5\u003eStart-up and shut-down transients\u003c/h5\u003e\n\u003cp\u003e\nAll models have a parameter \u003ccode\u003euse_inputFilter\u003c/code\u003e. This\nparameter affects the fan output as follows:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nIf \u003ccode\u003euse_inputFilter\u003dfalse\u003c/code\u003e, then the input signal \u003ccode\u003ey\u003c/code\u003e (or\n\u003ccode\u003eNrpm\u003c/code\u003e, \u003ccode\u003em_flow_in\u003c/code\u003e, or \u003ccode\u003edp_in\u003c/code\u003e)\nis equal to the fan speed (or the mass flow rate or pressure rise).\nThus, a step change in the input signal causes a step change in the fan speed (or mass flow rate or pressure rise).\n\u003c/li\u003e\n\u003cli\u003e\nIf \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e, which is the default,\nthen the fan speed (or the mass flow rate or the pressure rise)\nis equal to the output of a filter. This filter is implemented\nas a 2nd order differential equation and can be thought of as\napproximating the inertia of the rotor and the fluid.\nThus, a step change in the fan input signal will cause a gradual change\nin the fan speed.\nThe filter has a parameter \u003ccode\u003eriseTime\u003c/code\u003e, which by default is set to\n\u003ci\u003e30\u003c/i\u003e seconds.\nThe rise time is the time required to reach \u003ci\u003e99.6%\u003c/i\u003e of the full speed, or,\nif the fan is switched off, to reach a fan speed of \u003ci\u003e0.4%\u003c/i\u003e.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nThe figure below shows for a fan with \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e\nand \u003ccode\u003eriseTime\u003d30\u003c/code\u003e seconds the\nspeed input signal and the actual speed.\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Movers/UsersGuide/fanSpeedFiltered.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nAlthough many simulations do not require such a detailed model\nthat approximates the transients of fans or pumps, it turns\nout that using this filter can reduce computing time and\ncan lead to fewer convergence problems in large system models.\nWith a filter, any sudden change in control signal, such as when\na fan switches on, is damped before it affects the air flow rate.\nThis continuous change in flow rate turns out to be easier, and in\nsome cases faster, to simulate compared to a step change.\nFor most simulations, we therefore recommend to use the default settings\nof \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e and \u003ccode\u003eriseTime\u003d30\u003c/code\u003e seconds.\nAn exception are situations in which the fan or pump is operated at a fixed speed during\nthe whole simulation. In this case, set \u003ccode\u003euse_inputFilter\u003dfalse\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nNote that if the fan is part of a closed loop control, then the filter affects\nthe transient response of the control.\nWhen changing the value of \u003ccode\u003euse_inputFilter\u003c/code\u003e, the control gains\nmay need to be retuned.\nWe now present values control parameters that seem to work in most cases.\nSuppose there is a closed loop control with a PI-controller\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Continuous.LimPID\\\"\u003e\nBuildings.Controls.Continuous.LimPID\u003c/a\u003e\nand a fan or pump, configured with \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e and \u003ccode\u003eriseTime\u003d30\u003c/code\u003e seconds.\nAssume that the transient response of the other dynamic elements in the control loop is fast\ncompared to the rise time of the filter.\nThen, a proportional gain of \u003ccode\u003ek\u003d0.5\u003c/code\u003e and an integrator time constant of\n\u003ccode\u003eTi\u003d15\u003c/code\u003e seconds often yields satisfactory closed loop control performance.\nThese values may need to be changed for different applications as they are also a function\nof the loop gain.\nIf the control loop shows oscillatory behavior, then reduce \u003ccode\u003ek\u003c/code\u003e and/or increase \u003ccode\u003eTi\u003c/code\u003e.\nIf the control loop reacts too slow, do the opposite.\n\u003c/p\u003e\n\n\u003ch5\u003eEfficiency and electrical power consumption\u003c/h5\u003e\n\u003cp\u003e\nAll models compute the motor power draw \u003ci\u003eP\u003csub\u003eele\u003c/sub\u003e\u003c/i\u003e,\nthe hydraulic power input \u003ci\u003eW\u003csub\u003ehyd\u003c/sub\u003e\u003c/i\u003e, the flow work\n\u003ci\u003eW\u003csub\u003eflo\u003c/sub\u003e\u003c/i\u003e and the heat dissipated into the medium\n\u003ci\u003eQ\u003c/i\u003e. Based on the first law, the flow work is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  W\u003csub\u003eflo\u003c/sub\u003e \u003d | V\u0026#775; \u0026Delta;p |,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u0026#775;\u003c/i\u003e is the volume flow rate and\n\u003ci\u003e\u0026Delta;p\u003c/i\u003e is the pressure rise.\nThe heat dissipated into the medium is as follows:\nIf the motor is cooled by the fluid, as indicated by\n\u003ccode\u003eper.motorCooledByFluid\u003dtrue\u003c/code\u003e, then the heat dissipated into the medium is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  Q \u003d P\u003csub\u003eele\u003c/sub\u003e - W\u003csub\u003eflo\u003c/sub\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf \u003ccode\u003eper.motorCooledByFluid\u003dfalse\u003c/code\u003e, then the motor is outside the fluid stream,\nand only the shaft, or hydraulic, work \u003ci\u003eW\u003csub\u003ehyd\u003c/sub\u003e\u003c/i\u003e enters the thermodynamic\ncontrol volume. Hence,\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  Q \u003d Q\u003csub\u003ehyd\u003c/sub\u003e - W\u003csub\u003eflo\u003c/sub\u003e.\n\u003c/p\u003e\n\u003cp\u003eThe efficiencies are computed as\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta; \u003d W\u003csub\u003eflo\u003c/sub\u003e \u0026frasl; P\u003csub\u003eele\u003c/sub\u003e \u003d \u0026eta;\u003csub\u003ehyd\u003c/sub\u003e \u0026nbsp; \u0026eta;\u003csub\u003emot\u003c/sub\u003e \u003cbr/\u003e\n  \u0026eta;\u003csub\u003ehyd\u003c/sub\u003e \u003d W\u003csub\u003eflo\u003c/sub\u003e \u0026frasl; W\u003csub\u003ehyd\u003c/sub\u003e \u003cbr/\u003e\n  \u0026eta;\u003csub\u003emot\u003c/sub\u003e \u003d W\u003csub\u003ehyd\u003c/sub\u003e \u0026frasl; P\u003csub\u003eele\u003c/sub\u003e \u003cbr/\u003e\n\u003c/p\u003e\n\u003cp\u003ewhere\n\u003ci\u003e\u0026eta;\u003csub\u003ehyd\u003c/sub\u003e\u003c/i\u003e is the hydraulic efficiency,\n\u003ci\u003e\u0026eta;\u003csub\u003emot\u003c/sub\u003e\u003c/i\u003e is the motor efficiency and\n\u003ci\u003eQ\u003c/i\u003e is the heat released by the motor.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003eper.use_powerCharacteristic\u003dtrue\u003c/code\u003e,\nthen a set of data points for the power \u003ci\u003eP\u003csub\u003eele\u003c/sub\u003e\u003c/i\u003e for different\nvolume flow rates at full speed needs to be provided by the user.\nUsing the flow work \u003ci\u003eW\u003csub\u003eflo\u003c/sub\u003e\u003c/i\u003e and the electrical power input\n\u003ci\u003eP\u003csub\u003eele\u003c/sub\u003e\u003c/i\u003e, the total efficiency is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta; \u003d W\u003csub\u003eflo\u003c/sub\u003e \u0026frasl; P\u003csub\u003eele\u003c/sub\u003e, \u003cbr/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nand the two efficiencies\n\u003ci\u003e\u0026eta;\u003csub\u003ehyd\u003c/sub\u003e\u003c/i\u003e\nand \u003ci\u003e\u0026eta;\u003csub\u003emot\u003c/sub\u003e\u003c/i\u003e are computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta;\u003csub\u003ehyd\u003c/sub\u003e \u003d 1,\u003cbr/\u003e\n  \u0026radic;\u0026eta;\u003csub\u003emot\u003c/sub\u003e \u003d \u0026eta;.\n\u003c/p\u003e\n\u003cp\u003e\nHowever, if \u003ccode\u003eper.use_powerCharacteristic\u003dfalse\u003c/code\u003e, then\nperformance data for\n\u003ci\u003e\u0026eta;\u003csub\u003ehyd\u003c/sub\u003e\u003c/i\u003e and\n \u003ci\u003e\u0026eta;\u003csub\u003emot\u003c/sub\u003e\u003c/i\u003e need to be provided by the user, and hence\nthe model computes\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta; \u003d \u0026eta;\u003csub\u003ehyd\u003c/sub\u003e \u0026nbsp; \u0026eta;\u003csub\u003emot\u003c/sub\u003e\u003cbr/\u003e\n  P\u003csub\u003eele\u003c/sub\u003e \u003d W\u003csub\u003eflo\u003c/sub\u003e \u0026frasl; \u0026eta;.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe efficiency data for the motor are a list of points\n\u003ci\u003eV\u0026#775;\u003c/i\u003e and \u003ci\u003e\u0026eta;\u003csub\u003emot\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003ch5\u003eFluid volume of the component\u003c/h5\u003e\n\u003cp\u003e\nAll models can be configured to have a fluid volume at the low-pressure side.\nAdding such a volume sometimes helps the solver to find a solution during\ninitialization and time integration of large models.\n\u003c/p\u003e\n\n\u003ch5\u003eEnthalpy change of the component\u003c/h5\u003e\n\u003cp\u003e\nIf \u003ccode\u003eper.motorCooledByFluid\u003dtrue\u003c/code\u003e, then\nthe enthalpy change between the inlet and outlet fluid port is equal\nto the electrical power \u003ci\u003eP\u003csub\u003eele\u003c/sub\u003e\u003c/i\u003e that is consumed by the component.\nOtherwise, it is equal to the hydraulic work \u003ci\u003eW\u003csub\u003ehyd\u003c/sub\u003e\u003c/i\u003e.\nThe parameter \u003ccode\u003eaddPowerToMedium\u003c/code\u003e, which is by default set to\n\u003ccode\u003etrue\u003c/code\u003e, can be used to simplify the equations.\nIf \u003ccode\u003eaddPowerToMedium \u003d false\u003c/code\u003e, then no enthalpy change occurs between\ninlet and outlet.\nThis can lead to simpler equations, but the temperature rise across the component\nwill be zero. In particular for fans, this simplification may not be permissible.\n\u003c/p\u003e\n\n\u003ch4\u003eDifferences to models in Modelica.Fluid.Machines\u003c/h4\u003e\n\u003cp\u003e\nThe models in this package differ from\n\u003ca href\u003d\\\"Modelica.Fluid.Machines\\\"\u003eModelica.Fluid.Machines\u003c/a\u003e\nprimarily in the following points:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThey use a different base class, which allows to have zero mass flow rate.\nThe models in \u003ccode\u003eModelica.Fluid\u003c/code\u003e restrict the number of revolutions, and hence the flow\nrate, to be non-zero.\n\u003c/li\u003e\n\u003cli\u003e\nFor the model with prescribed pressure, the input signal is the\npressure difference between the two ports, and not the absolute\npressure at \u003ccode\u003eport_b\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe pressure calculations are based on total pressure in Pascals instead of the pump head in meters.\nThis change was done to avoid ambiguities in the parameterization if the models are used as a fan\nwith air as the medium. The original formulation in\n\u003ca href\u003d\\\"Modelica.Fluid.Machines\\\"\u003eModelica.Fluid.Machines\u003c/a\u003e converts head\nto pressure using the density \u003ccode\u003emedium.d\u003c/code\u003e. Therefore, for fans,\nhead would be converted to pressure using the density of air. However, for fans,\nmanufacturers typically publish the head in millimeters water (mmH20).\nTherefore, to avoid confusion when using these models with media other than water,\nwe changed the models to use total pressure in Pascals instead of head in meters.\n\u003c/li\u003e\n\u003cli\u003e\nThe performance data are interpolated using cubic hermite splines instead of polynomials.\nThese functions are implemented in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics\\\"\u003e\nBuildings.Fluid.Movers.BaseClasses.Characteristics\u003c/a\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nMichael Wetter.\n\u003ca href\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Movers/UsersGuide/2013-IBPSA-Wetter.pdf\\\"\u003e\nFan and pump model that has a unique solution for any pressure\nboundary condition and control signal.\u003c/a\u003e\n\u003ci\u003eProc. of the 13th Conference of the International Building Performance\nSimulation Association\u003c/i\u003e, p. 3505-3512. Chambery, France. August 2013.\n\u003c/p\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}]}