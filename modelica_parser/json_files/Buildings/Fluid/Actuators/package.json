{"within":[{"name":"Buildings.Fluid"}],"class_definition":[{"class_prefixes":{"prefix":"package"},"class_specifier":{"long_class_specifier":{"name":"Actuators","comment":{"string":"\"Package with actuator models such as valves and dampers\""},"composition":{"element_list":{"element":[{"extends_clause":{"name":{"name":"Modelica.Icons.VariantsPackage"}}},{"class_definition":{"class_prefixes":{"prefix":"package"},"class_specifier":{"long_class_specifier":{"name":"UsersGuide","comment":{"string":"\"User\u0027s Guide\""},"composition":{"element_list":{"element":[{"extends_clause":{"name":{"name":"Modelica.Icons.Information"}}}]},"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"preferredView"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"info\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003ch4\u003ePressure drop of valves\u003c/h4\u003e\n\u003cp\u003e\nAll two and three-way valves have a parameter\n\u003ccode\u003edpFixed_nominal\u003c/code\u003e. This parameter can be set to a positive (non-zero)\nvalue to model a pressure drop that is in series to the valve.\nIf \u003ccode\u003edpFixed_nominal\u003d0\u003c/code\u003e, then only the valve pressure drop is modeled.\n\u003c/p\u003e\n\u003cp\u003e\nFor example, in the schematics below, a valve and a fixed resistance\nare modeled in series.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Actuators/valvePressureDropSeries.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThis often introduces an additional nonlinear equation.\nSuppose that in the above model, the parameters for the flow resistance are\n\u003c/p\u003e\n\u003cpre\u003e\n  val(dpValve_nominal\u003d6000, dpFixed\u003d0, m_flow_nominal\u003d0.1);\n  res(dp_nominal\u003d10000,                m_flow_nominal\u003d0.1);\n\u003c/pre\u003e\n\u003cp\u003e\nInstead of this arrangement, the model \u003ccode\u003eres\u003c/code\u003e can be deleted\nand the valve configured as\n\u003c/p\u003e\n\u003cpre\u003e\n  val(dpValve_nominal\u003d6000, dpFixed\u003d10000, m_flow_nominal\u003d0.1);\n\u003c/pre\u003e\n\u003cp\u003e\nThis yields the same simulation results, but a nonlinear equation can be avoided\nin some cases. Although lumping the pressure drop of other components into the\nvalve model violates the intent that in component-based modeling, each component\nshould only model its own behavior, having the option of eliminating\na nonlinear equation can be worthwhile.\n\u003c/p\u003e\n\u003cp\u003e\nFor three way valves, similar parameters exist for the controlled ports of the valve. For example,\nconsider the configuration below.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Actuators/threeWayValvePressureDropSeries.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nSuppose the parameters are\n\u003c/p\u003e\n\u003cpre\u003e\n  val(dpValve_nominal\u003d6000, dpFixed\u003d{0, 0}, m_flow_nominal\u003d0.1);\n  res1(dp_nominal\u003d10000,                    m_flow_nominal\u003d0.1);\n  res3(dp_nominal\u003d100,                      m_flow_nominal\u003d0.1);\n\u003c/pre\u003e\n\u003cp\u003e\nAn equivalent model could be created by deleting the two resistance models\n\u003ccode\u003eres1\u003c/code\u003e and \u003ccode\u003eres3\u003c/code\u003e, and configuring the valve as\n\u003c/p\u003e\n\u003cpre\u003e\n  val(dpValve_nominal\u003d6000, dpFixed\u003d{10000, 100}, m_flow_nominal\u003d0.1);\n\u003c/pre\u003e\n\u003ch4\u003eLeakage flow rate\u003c/h4\u003e\n\u003cp\u003e\nValves and air dampers should for numerical reasons have a small leakage flow rate.\nThis leakage \u003ci\u003el\u003c/i\u003e is a non-dimensional number, defined as\n\u003ci\u003el\u003dK\u003csub\u003ev\u003c/sub\u003e(y\u003d0) \u0026frasl; \u003dK\u003csub\u003ev\u003c/sub\u003e(y\u003d1)\u003c/i\u003e.\nA typical default value is \u003ci\u003el\u003d0.0001\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ci\u003el\u003d0\u003c/i\u003e, models will issue an error message as\nthis can in some situations lead to numerical problems if\na flow leg becomes decoupled from a reference pressure source.\n\u003c/p\u003e\n\u003ch4\u003eTransients of actuators\u003c/h4\u003e\n\u003cp\u003e\nThis section describes how valves and dampers can be configured\nto approximate the travel time of an actuator.\nSuch an approximation can also lead to faster simulation because\ndiscrete or fast changes in controllers are damped before they\ninfluence the flow network.\n\u003c/p\u003e\n\u003ch5\u003eApproximation using a 2nd order filter\u003c/h5\u003e\n\u003cp\u003e\nThe valves and dampers in the package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators\\\"\u003e\nBuildings.Fluid.Actuators\u003c/a\u003e\nall have a parameter \u003ccode\u003euse_inputFilter\u003c/code\u003e.\nThis parameter is used as follows:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nIf \u003ccode\u003euse_inputFilter\u003dfalse\u003c/code\u003e, then the actual valve\nor damper position is equal to the input signal \u003ccode\u003ey\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nIf \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e, then the actual valve or damper position\nis computed in such a way that it approximates a valve motor.\nThis approximation is implemented using a 2nd order low-pass filter.\nThe filter has a parameter \u003ccode\u003eriseTime\u003c/code\u003e, which by default is\nset to \u003ci\u003e120\u003c/i\u003e seconds.\nThe rise time is the time required to reach 99.6% of the opening.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nUsing a filter often leads to a more robust simulation,\nbecause a step change\nin the input signal is \\\"smoothened\\\" by the filter, and\nhence the flow network is only exposed to a continuously differentiable change\nin the input signal.\nHowever, if the filter is part of a closed loop control, then the transient\nresponse gets changed. Therefore, if the parameter \u003ccode\u003euse_inputFilter\u003c/code\u003e\nis changed, control gains may need to be retuned.\n\u003c/p\u003e\n\u003cp\u003e\nFor example, suppose there is a closed loop control with a PI-controller\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Continuous.LimPID\\\"\u003e\nBuildings.Controls.Continuous.LimPID\u003c/a\u003e\nand a valve, configured with \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e and \u003ccode\u003eriseTime\u003d120\u003c/code\u003e seconds.\nAssume that the transient response of the other dynamic elements in the control loop is fast\ncompared to the rise time of the filter.\nThen, a proportional gain of \u003ccode\u003ek\u003d0.1\u003c/code\u003e and an integrator time constant of\n\u003ccode\u003eTi\u003d120\u003c/code\u003e seconds often yields satisfactory closed loop control performance.\nThese values may need to be changed for different applications as they are also a function\nof the loop gain.\nIf the control loop shows oscillatory behavior, then reduce \u003ccode\u003ek\u003c/code\u003e and/or increase \u003ccode\u003eTi\u003c/code\u003e.\nIf the control loop reacts too slow, do the opposite.\n\u003c/p\u003e\n\u003cp\u003e\nWe will now show how the parameter \u003ccode\u003eriseTime\u003c/code\u003e affects the actual position of a\ncontrol valve.\nThe figure below shows a model with two control valves.\nThe valve \u003ccode\u003eval1\u003c/code\u003e is configured with \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e\nand a rise time \u003ccode\u003eriseTime\u003d120\u003c/code\u003e seconds.\nThe grey motor symbol above the control valve \u003ccode\u003eval1\u003c/code\u003e\nindicates that \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Actuators/valveSchematic.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nIf these valves both have a step input signal at \u003ci\u003e10\u003c/i\u003e seconds, then the\nactual opening of the valves are as follows:\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Actuators/valveResponse.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThus, in the valve \u003ccode\u003eval1\u003c/code\u003e, the mass flow rate will slowly increase,\nwhereas in \u003ccode\u003eval2\u003c/code\u003e, the mass flow rate changes instantaneously.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003euse_inputFilter\u003dtrue\u003c/code\u003e, then the parameter\n\u003ccode\u003ey_start\u003c/code\u003e can be used to set the initial position of the\nactuator, and the parameter\n\u003ccode\u003einit\u003c/code\u003e can be used to configure how the position\nshould be initialized.\n\u003c/p\u003e\n\u003cp\u003e\nFor most applications, the default values are appropriate.\nAlthough adding a filter increases the number of equations,\nit can reduce computing time because the equations are\neasier to solve when a controller switches.\n\u003c/p\u003e\n\u003ch5\u003eApproximation using a motor model with hysteresis\u003c/h5\u003e\n\u003cp\u003e\nThe model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Motors.IdealMotor\\\"\u003e\nBuildings.Fluid.Actuators.Motors.IdealMotor\u003c/a\u003e\nmodels a motor with hysteresis.\nIt is more detailed than the above approximation.\nHowever, it can significantly increase computing time\nbecause it generates a state event whenever the valve position changes.\n\u003c/p\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}}]},"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"preferredView"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"info\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\nThis package contains component models for actuators.\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}]}