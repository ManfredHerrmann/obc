{"within":[{"name":"Buildings.Fluid.HeatExchangers.BaseClasses"}],"class_definition":[{"class_prefixes":{"prefix":"package"},"class_specifier":{"long_class_specifier":{"name":"Internal","comment":{"string":"\"Solve f(x, data) for x with given f\""},"composition":{"element_list":{"element":[{"extends_clause":{"name":{"name":"Modelica.Media.Common.OneNonLinearEquation"}}},{"prefix":"redeclare ","class_definition":{"class_prefixes":{"prefix":"nullnull null function"},"class_specifier":{"long_class_specifier":{"prefix":"extends","name":"f_nonlinear","comment":{},"composition":{"element_list":{},"algorithm_section":[{"algorithm":"algorithm","statement":[{"component_reference":{"component":"assert"},"function_call_args":{"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"x"}}]}}]},"rel_op":{"rel_op":"\u003e"},"expression2":{"terms":[{"factor":{"primarys":[{"simple_primary":"0"}]}}]}}}}}}}},"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"NTU needs to be strictly positive.\nReceived NTU \u003d \""}]}},{"factor":{"primarys":[{"name":{"name":"String"},"function_call_args":{"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"x"}}]}}]}}}}}}}}}}}]}},{"factor":{"primarys":[{"simple_primary":"\"\n         Z   \u003d \""}]}},{"factor":{"primarys":[{"name":{"name":"String"},"function_call_args":{"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"p"}}]}}]}}}}}}}}}}}]}}],"adds":[{"add_op":"+"},{"add_op":"+"},{"add_op":"+"}]}}}}}}}}}}},"comment":{"comment":{}}},{"component_reference":{"component":"y"},"operator":":\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"name":{"name":"epsilon_ntuZ"},"function_call_args":{"arguments":{"named_arguments":{"argument":{"name":"NTU","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"x"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"Z","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"p"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"flowRegime","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"name":{"name":"Integer"},"function_call_args":{"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"Buildings.Fluid.Types.HeatExchangerFlowRegime.CrossFlowUnmixed"}}]}}]}}}}}}}}}}}]}}]}}}}}}}}}}}}}}}]}}]}}}}}}},"comment":{"comment":{}}}]}]}}}}}]},"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cp\u003e\nFunction that internally solves a scalar equation.\n\u003c/p\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"revisions"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nJuly 7, 2014, by Michael Wetter:\u003cbr/\u003e\nChanged the type of the input \u003ccode\u003eflowRegime\u003c/code\u003e from\n\u003ccode\u003eBuildings.Fluid.Types.HeatExchangerFlowRegime\u003c/code\u003e\nto \u003ccode\u003eInteger\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nAugust 10, 2011, by Michael Wetter:\n\u003cul\u003e\n\u003cli\u003e\nChanged implementation to use\n\u003ccode\u003eModelica.Media.Common.OneNonLinearEquation\u003c/code\u003e instead of\n\u003ccode\u003eBuildings.Utilities.Math.BaseClasses.OneNonLinearEquation\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nAdded assert statement as \u003ccode\u003eepsilon_ntuZ\u003c/code\u003e computes \u003ccode\u003eNTU^(-0.22)\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\nFebruary 16, 2010, by Michael Wetter:\u003cbr/\u003e\nFirst implementation.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}]}