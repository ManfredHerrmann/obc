{"within":[{"name":"Buildings.Utilities.IO.Python27"}],"class_definition":[{"class_prefixes":{"prefix":"package"},"class_specifier":{"long_class_specifier":{"name":"UsersGuide","comment":{"string":"\"User\u0027s Guide\""},"composition":{"element_list":{"element":[{"extends_clause":{"name":{"name":"Modelica.Icons.Information"}}}]},"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"preferredView"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"info\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cp\u003e\nThis package contains classes that call Python functions.\nThe classes can be used to send data to Python functions,\nand to obtain data from Python functions.\nThis allows for example to use Python to communicate\nwith web services, with hardware, or to do other computations\ninside a Python module.\n\u003c/p\u003e\n\u003cp\u003e\nThe code has been tested with Python 2.7 on\nLinux 32 and 64 bit and Windows 32 and 64 bit.\n\u003c/p\u003e\n\u003ch4\u003eSoftware configuration to use classes from this package\u003c/h4\u003e\n\u003cp\u003e\nTo use classes from this package, a Python 2.7\nruntime environment must be installed.\nAlso, the system environment variable\n\u003ccode\u003ePYTHONPATH\u003c/code\u003e must be set in order for Python\nto find the modules that contain the functions.\nThese modules are stored in the directory\n\u003ccode\u003eBuildings/Resources/Python-Sources\u003c/code\u003e.\nIn addition, an environment variable (\u003ccode\u003eLD_LIBRARY_PATH\u003c/code\u003e on Linux\nand \u003ccode\u003ePATH\u003c/code\u003e on Windows) must be set in order for a simulation\nenvironment to find the dynamically linked libraries.\nThe table below explains how to set these variables for\nvarious system configurations.\n\u003c/p\u003e\n\u003cp\u003e\nBecause some Python libraries may also link to compiled C code, we\nrecommend that if you are using a 64-bit operating system, you configure\nDymola to generate 64 bit code. Configuring the compilation\ncan be done by entering on the\nDymola command line the assignment\n\u003ccode\u003eAdvanced.CompileWith64\u003d1\u003c/code\u003e for 32-bit, or\n\u003ccode\u003eAdvanced.CompileWith64\u003d2\u003c/code\u003e for 64-bit.\n\u003c/p\u003e\n  \u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e\n      \u003cth\u003eSystem\u003c/th\u003e\n      \u003cth\u003eSettings\u003c/th\u003e\n   \u003c/tr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eLinux 32 bit, Dymola 2016\u003c/td\u003e\n      \u003ctd\u003e\n      \u003cp\u003e\n      Enter on a console the commands\n      \u003c/p\u003e\n\u003cpre\u003e\n  export PYTHONPATH\u003d${PYTHONPATH}:\\\"Path_To_Buildings_Library\\\"/Resources/Python-Sources\n  export LD_LIBRARY_PATH\u003d${LD_LIBRARY_PATH}:\\\"Path_To_Buildings_Library\\\"/Resources/Library/linux32\n  \u003c/pre\u003e\n  \u003cp\u003e\n  Alternatively, these lines could be added to the file \u003ccode\u003e~/.bashrc\u003c/code\u003e.\n  \u003c/p\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n      \u003ctd\u003eLinux 64 bit, Dymola 2016\u003c/td\u003e\n      \u003ctd\u003e\n      \u003cp\u003e\n      Use the same commands as for \u003ci\u003eLinux 64 bit, Dymola 2016\u003c/i\u003e\n      because Dymola 2016 generates by default 32 bit code.\n      \u003c/p\u003e\n      \u003cp\u003e\n      However, if you load other Python libraries such as numpy, you need to make sure\n      that Dymola compiles 64 bit and uses the 64 bit library from\n      \u003ccode\u003eBuildings/Resources/Library/linux64\u003c/code\u003e.\n      To do so, enter on a console the commands\n      \u003c/p\u003e\n\u003cpre\u003e\n  export PYTHONPATH\u003d${PYTHONPATH}:\\\"Path_To_Buildings_Library\\\"/Resources/Python-Sources\n  export LD_LIBRARY_PATH\u003d${LD_LIBRARY_PATH}:\\\"Path_To_Buildings_Library\\\"/Resources/Library/linux64\n  \u003c/pre\u003e\n  \u003cp\u003e\nAlternatively, these lines could be added to the file \u003ccode\u003e~/.bashrc\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nNext, in the Dymola command window, set\n\u003c/p\u003e\n\u003cpre\u003e\n Advanced.CompileWith64\u003d2;\n\u003c/pre\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eLinux 32 bit, Dymola 2014\u003c/td\u003e\n      \u003ctd\u003e\nEnter on a console the commands\n\u003cpre\u003e\n  export PYTHONPATH\u003d${PYTHONPATH}:\\\"Path_To_Buildings_Library\\\"/Resources/Python-Sources\n  export LD_LIBRARY_PATH\u003d${LD_LIBRARY_PATH}:\\\"Path_To_Buildings_Library\\\"/Resources/Library/linux32\n\u003c/pre\u003e\nAlternatively, these lines could be added to the file \u003ccode\u003e~/.bashrc\u003c/code\u003e.\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n      \u003ctd\u003eLinux 64 bit, Dymola 2014\u003c/td\u003e\n      \u003ctd\u003e\nUse the same commands as for \u003ci\u003eLinux 64 bit, Dymola 2014\u003c/i\u003e because Dymola 2014 only generates 32 bit code.\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eLinux 32 bit, Dymola 2013 FD01\u003c/td\u003e\n      \u003ctd\u003e\nEnter on a console the commands\n\u003cpre\u003e\n  export PYTHONPATH\u003d${PYTHONPATH}:\\\"Path_To_Buildings_Library\\\"/Resources/Python-Sources\n\u003c/pre\u003e\nAlternatively, these lines could be added to the file \u003ccode\u003e~/.bashrc\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nNext, modify \u003ccode\u003e/opt/dymola/bin/dymola.sh\u003c/code\u003e by replacing the line\n\u003cpre\u003e\n  export LD_LIBRARY_PATH\u003d$DYMOLA/bin/lib\n\u003c/pre\u003e\nwith\n\u003cpre\u003e\n  export LD_LIBRARY_PATH\u003d$DYMOLA/bin/lib:\\\"Path_To_Buildings_Library\\\"/Resources/Library/linux32\n  export LD_LIBRARY_PATH\u003d$DYMOLA/bin/lib:Resources/Library/linux32\n\u003c/pre\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eLinux 64 bit, Dymola 2013 FD01\u003c/td\u003e\n      \u003ctd\u003e\nUse the same commands as for \u003ci\u003eLinux 32 bit, Dymola 2013 FD01\u003c/i\u003e because Dymola 2013 FD01 only generates 32 bit code.\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eWindows 32 bit, Dymola 2014\n      \u003cbr/\u003eWindows 64 bit, Dymola 2014\n      \u003cbr/\u003eWindows 32 bit, Dymola 2013 FD01\n      \u003cbr/\u003eWindows 64 bit, Dymola 2013 FD01 \u003c/td\u003e\n      \u003ctd\u003e\n        Add to the system environment variable \u003ccode\u003ePYTHONPATH\u003c/code\u003e the directory\n        \u003ccode\u003e\\\"Path_To_Buildings_Library\\\"\\\\Resources\\\\Python-Sources\u003c/code\u003e.\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n  \u003c/table\u003e\n\n\u003ch4\u003eNumber of values to read to Python and write from Python\u003c/h4\u003e\n\u003cp\u003e\nThe parameters \u003ccode\u003enDblWri\u003c/code\u003e (or \u003ccode\u003enIntWri\u003c/code\u003e or \u003ccode\u003enStrWri\u003c/code\u003e)\nand \u003ccode\u003enDblRea\u003c/code\u003e (or \u003ccode\u003enIntRea\u003c/code\u003e) declare\nhow many double (integer or string) values should be written to, or read from, the Python function.\nThese values can be zero, in which case the Python function receives no\narguments for this data type, or it must return a list with zero elements.\nHowever, because Modelica does not allow arrays with\nzero elements, the arrays\n\u003ccode\u003edblWri\u003c/code\u003e and \u003ccode\u003edblRea\u003c/code\u003e, respectively, must contain exactly one element\nif \u003ccode\u003enDblWri\u003d0\u003c/code\u003e or \u003ccode\u003enDblRea\u003d0\u003c/code\u003e.\nIn this situation, \u003ccode\u003edblWri\u003c/code\u003e is a dummy argument that will not be written to Python,\nand \u003ccode\u003edblRea\u003c/code\u003e contains a number that must not be used in any model.\n\u003c/p\u003e\n\n\u003ch4\u003eArguments of the Python function\u003c/h4\u003e\n\u003cp\u003e\nThe arguments of the python functions are, in this order,\nfloats, integers and strings.\nIf there is only one element of each data type, then a single value is passed.\nIf there are multiple elements of each data type, then they are stored in a list.\nIf there is no value of a data type (such as if \u003ccode\u003enDblWri\u003d0\u003c/code\u003e), then the argument is not present.\nThus, if a data type is not present, then the function will \u003ci\u003enot\u003c/i\u003e receive an empty list of this data type.\nIf there are no arguments at all, then the function takes no arguments.\u003c/p\u003e\n\u003cp\u003e\nThe table below shows the list of arguments for various combinations where no,\none or two double values, integers and strings are passed as an argument to a Python function.\n\u003c/p\u003e\n \u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e \u003cth\u003enDblWri\u003c/th\u003e   \u003cth\u003enIntWri\u003c/th\u003e  \u003cth\u003enStrWri\u003c/th\u003e  \u003cth\u003eArguments\u003c/th\u003e  \u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e1      \u003c/td\u003e   \u003ctd\u003e0      \u003c/td\u003e  \u003ctd\u003e0      \u003c/td\u003e  \u003ctd\u003e1.                            \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e0      \u003c/td\u003e   \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e1, \\\"a\\\"                        \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2      \u003c/td\u003e   \u003ctd\u003e0      \u003c/td\u003e  \u003ctd\u003e2      \u003c/td\u003e  \u003ctd\u003e[1.0, 2.0], [\\\"a\\\", \\\"b\\\"]        \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e1      \u003c/td\u003e   \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e 1.0, 2, \\\"a\\\"                  \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e1      \u003c/td\u003e   \u003ctd\u003e2      \u003c/td\u003e  \u003ctd\u003e0      \u003c/td\u003e  \u003ctd\u003e 1.0       , [1, 2]           \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2      \u003c/td\u003e   \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e0      \u003c/td\u003e  \u003ctd\u003e[1.0, 2.0], 1                 \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2      \u003c/td\u003e   \u003ctd\u003e2      \u003c/td\u003e  \u003ctd\u003e2      \u003c/td\u003e  \u003ctd\u003e[1.0, 2.0], [1, 2], [\\\"a\\\", \\\"b\\\"]\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\u003cbr/\u003e\n\n\u003ch4\u003eReturns values of the Python function\u003c/h4\u003e\n\u003cp\u003e\nThe Python function must return their values in the following order:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nIf the function returns one or multiple double values, then the first return\nvalue must be a double (if \u003ccode\u003enDblRea\u003d1\u003c/code\u003e) or a list of doubles\n(if \u003ccode\u003enDblRea \u0026gt; 1\u003c/code\u003e).\n\u003c/li\u003e\n\u003cli\u003e\nIf the function returns one or multiple integer values, then the next return\nvalue must be an integer (if \u003ccode\u003enIntRea\u003d1\u003c/code\u003e) or a list of integers\n(if \u003ccode\u003enIntRea \u0026gt; 1\u003c/code\u003e).\n\u003c/li\u003e\n\u003cli\u003e\nIf \u003ccode\u003enDblRea \u003d nIntRea \u003d 0\u003c/code\u003e, then the return values of the function, if any, are\nignored.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nThe table below shows valid return types for various combinations where no, one or two double values\nand integer values are returned.\u003c/p\u003e\n \u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e \u003cth\u003enDblRea\u003c/th\u003e   \u003cth\u003enIntRea\u003c/th\u003e  \u003cth\u003eReturn value\u003c/th\u003e  \u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e1      \u003c/td\u003e   \u003ctd\u003e0      \u003c/td\u003e  \u003ctd\u003e1.                 \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e0      \u003c/td\u003e   \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e1                  \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2      \u003c/td\u003e   \u003ctd\u003e0      \u003c/td\u003e  \u003ctd\u003e[1.0, 2.0]         \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e1      \u003c/td\u003e   \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e 1.0, 2            \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e1      \u003c/td\u003e   \u003ctd\u003e2      \u003c/td\u003e  \u003ctd\u003e 1.0      , [1, 2] \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2      \u003c/td\u003e   \u003ctd\u003e1      \u003c/td\u003e  \u003ctd\u003e[1.0, 2.0],  1     \u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2      \u003c/td\u003e   \u003ctd\u003e2      \u003c/td\u003e  \u003ctd\u003e[1.0, 2.0], [1, 2] \u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003c!-- Not yet implemented as pure functions are not supported in Dymola 2013 FD01 --\u003e\n\u003ch4\u003ePure Modelica functions (functions without side effects)\u003c/h4\u003e\n\u003cp\u003e\nThe functions that exchange data with Python are implemented as \u003ci\u003epure\u003c/i\u003e\nModelica functions.\nPure functions always return the same value if called repeatedly.\nIf these functions are used to call hardware sensors or web services,\nthey need to be called from a \u003ccode\u003ewhen\u003c/code\u003e-equation.\u003c/p\u003e\n\u003cp\u003e\nSee the Modelica language specification for an explanation\nof pure and impure functions.\n\u003c/p\u003e\n\n\u003ch4\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\nThe example\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.Python27.Functions.Examples.Exchange\\\"\u003e\nBuildings.Utilities.IO.Python27.Functions.Examples.Exchange\u003c/a\u003e\ncontains various calls to different Python functions.\nThe Python functions are stored in the directory\n\u003ccode\u003eBuildings/Resources/Python-Sources\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe example\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.Python27.Examples.KalmanFilter\\\"\u003e\nBuildings.Utilities.IO.Python27.Examples.KalmanFilter\u003c/a\u003e\nshows how to implement in a Modelica block a call to a Python function.\n\u003c/p\u003e\n\n\u003ch4\u003eImplementation notes\u003c/h4\u003e\n\u003cp\u003e\nString values cannot be returned from a Python function.\nThe reason is that Dymola 2013 FD01 generates a compile time error\nif a Modelica function returns \u003ccode\u003e(Real[nR], Integer[nI], String)\u003c/code\u003e.\nThis will be fixed in Dymola 2014.\n(Support request #14983.)\n\u003c/p\u003e\n\u003ch4\u003eKnown Issues\u003c/h4\u003e\n\u003cp\u003e\nThe Python installation of Ubuntu 14.04 has a bug that causes Dymola\nto produce output of the following form:\n\u003c/p\u003e\n\u003cpre\u003e\nTraceback (most recent call last):\n  File \\\"/usr/lib/python2.7/site.py\\\", line 563, in \u0026lt;module\u0026gt;\n    main()\n  File \\\"/usr/lib/python2.7/site.py\\\", line 545, in main\n    known_paths \u003d addusersitepackages(known_paths)\n  File \\\"/usr/lib/python2.7/site.py\\\", line 272, in addusersitepackages\n    user_site \u003d getusersitepackages()\n  File \\\"/usr/lib/python2.7/site.py\\\", line 247, in getusersitepackages\n    user_base \u003d getuserbase() # this will also set USER_BASE\n  File \\\"/usr/lib/python2.7/site.py\\\", line 237, in getuserbase\n    USER_BASE \u003d get_config_var(\u0027userbase\u0027)\n  File \\\"/usr/lib/python2.7/sysconfig.py\\\", line 578, in get_config_var\n    return get_config_vars().get(name)\n  File \\\"/usr/lib/python2.7/sysconfig.py\\\", line 524, in get_config_vars\n    _init_posix(_CONFIG_VARS)\n  File \\\"/usr/lib/python2.7/sysconfig.py\\\", line 408, in _init_posix\n    from _sysconfigdata import build_time_vars\n  File \\\"/usr/lib/python2.7/_sysconfigdata.py\\\", line 6, in \u0026lt;module\u0026gt;\n    from _sysconfigdata_nd import *\nImportError: No module named _sysconfigdat\n...(message truncated)\n\u003c/pre\u003e\n\u003cp\u003e\nAs a work-around, type in a shell the commands\n\u003c/p\u003e\n\u003cpre\u003e\n$ cd /usr/lib/python2.7\n$ sudo ln -s plat-x86_64-linux-gnu/_sysconfigdata_nd.py .\n\u003c/pre\u003e\n\u003cp\u003e\nSee also \u003ca href\u003d\\\"https://bugs.launchpad.net/ubuntu/+source/python2.7/+bug/1115466\\\"\u003e\nhttps://bugs.launchpad.net/ubuntu/+source/python2.7/+bug/1115466\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}]}