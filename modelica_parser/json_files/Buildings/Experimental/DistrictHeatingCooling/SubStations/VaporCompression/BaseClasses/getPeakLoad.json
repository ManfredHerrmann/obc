{"within":[{"name":"Buildings.Experimental.DistrictHeatingCooling.SubStations.VaporCompression.BaseClasses"}],"class_definition":[{"class_prefixes":{"prefix":"nullnull null function"},"class_specifier":{"long_class_specifier":{"name":"getPeakLoad","comment":{"string":"\"Function that reads the peak load from the load profile\""},"composition":{"protect":["protected"],"element_list":{"element":[{"component_clause":{"type_prefix":{"prefix":" input"},"type_specifier":{"specifier":{"name":"String"}},"component_list":{"component_declaration":[{"declaration":{"name":"string"},"comment":{"comment":{"string":"\"String that is written before the \u0027\u003d\u0027 sign\""}}}]}}},{"component_clause":{"type_prefix":{"prefix":" input"},"type_specifier":{"specifier":{"name":"String"}},"component_list":{"component_declaration":[{"declaration":{"name":"filNam"},"comment":{"comment":{"string":"\"Name of data file with heating and cooling load\""},"annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Dialog"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"loadSelector"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"filter"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"Load file (*.mos)\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"caption"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"Select load file\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}]}}},{"component_clause":{"type_prefix":{"prefix":" output"},"type_specifier":{"specifier":{"name":"Real"}},"component_list":{"component_declaration":[{"declaration":{"name":"number"},"comment":{"comment":{"string":"\"Number that is read from the file\""}}}]}}}]},"prefixed_element":[{"element":[{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"String"}},"component_list":{"component_declaration":[{"declaration":{"name":"lin"},"comment":{"comment":{"string":"\"Line that is used in parser\""}}}]}}},{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"Integer"}},"component_list":{"component_declaration":[{"declaration":{"name":"iLin"},"comment":{"comment":{"string":"\"Line number\""}}}]}}},{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"Integer"}},"component_list":{"component_declaration":[{"declaration":{"name":"index","modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"0"}]}}]}}}}}}}}},"comment":{"comment":{"string":"\"Index of string \u0027string\u0027\""}}}]}}},{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"Integer"}},"component_list":{"component_declaration":[{"declaration":{"name":"staInd"},"comment":{"comment":{"string":"\"Start index used when parsing a real number\""}}}]}}},{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"Integer"}},"component_list":{"component_declaration":[{"declaration":{"name":"nexInd"},"comment":{"comment":{"string":"\"Next index used when parsing a real number\""}}}]}}},{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"Boolean"}},"component_list":{"component_declaration":[{"declaration":{"name":"found"},"comment":{"comment":{"string":"\"Flag, true if \u0027string\u0027 has been found\""}}}]}}},{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"Boolean"}},"component_list":{"component_declaration":[{"declaration":{"name":"EOF"},"comment":{"comment":{"string":"\"Flag, true if EOF has been reached\""}}}]}}},{"component_clause":{"type_prefix":{},"type_specifier":{"specifier":{"name":"String"}},"component_list":{"component_declaration":[{"declaration":{"name":"del"},"comment":{"comment":{"string":"\"Found delimiter\""}}}]}}}]}],"algorithm_section":[{"algorithm":"algorithm","statement":[{"component_reference":{"component":"iLin"},"operator":":\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"0"}]}}]}}}}}}},"comment":{"comment":{}}},{"component_reference":{"component":"EOF"},"operator":":\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"false"}]}}]}}}}}}},"comment":{"comment":{}}},{"while_statement":{"wHile":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"output_expression_list":{"expression":[{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"not":"not","relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"EOF"}}]}}]}}}}}}}]}}]}}]}}},"logical_relation":"and","logical_factors":[{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"output_expression_list":{"expression":[{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"index"}}]}}]},"rel_op":{"rel_op":"\u003d\u003d"},"expression2":{"terms":[{"factor":{"primarys":[{"simple_primary":"0"}]}}]}}}}}}}]}}]}}]}}}]}}}},"loop":[{"component_reference":{"component":"iLin"},"operator":":\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"iLin"}}]}},{"factor":{"primarys":[{"simple_primary":"1"}]}}],"adds":[{"add_op":"+"}]}}}}}}},"comment":{"comment":{}}},{"component_reference":{"component":"Modelica.Utilities.Streams.readLine"},"operator":":\u003d","function_call_args":{"arguments":{"named_arguments":{"argument":{"name":"fileName","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"filNam"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"lineNumber","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"iLin"}}]}}]}}}}}}}}}}}}},"output_expression_list":{"expression":[{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"lin"}}]}}]}}}}}}},{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"EOF"}}]}}]}}}}}}}]},"comment":{"comment":{}}},{"component_reference":{"component":"index"},"operator":":\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"name":{"name":"Modelica.Utilities.Strings.find"},"function_call_args":{"arguments":{"named_arguments":{"argument":{"name":"string","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"lin"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"searchString","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"string"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"startIndex","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"1"}]}}]}}}}}}}}},"arguments":{"argument":{"name":"caseSensitive","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"true"}]}}]}}}}}}}}}}}}}}}}]}}]}}}}}}},"comment":{"comment":{}}}]},"comment":{"comment":{}}},{"component_reference":{"component":"assert"},"function_call_args":{"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"not":"not","relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"EOF"}}]}}]}}}}}}}},"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"Error: Did not find \u0027\""}]}},{"factor":{"primarys":[{"component_reference":{"component":"string"}}]}},{"factor":{"primarys":[{"simple_primary":"\"\u0027 when scanning \u0027\""}]}},{"factor":{"primarys":[{"component_reference":{"component":"filNam"}}]}},{"factor":{"primarys":[{"simple_primary":"\"\u0027.\""}]}},{"factor":{"primarys":[{"simple_primary":"\"\\n   Check for correct file syntax.\""}]}}],"adds":[{"add_op":"+"},{"add_op":"+"},{"add_op":"+"},{"add_op":"+"},{"add_op":"+"}]}}}}}}}}}}},"comment":{"comment":{}}},{"component_reference":{"component":"Modelica.Utilities.Strings.scanDelimiter"},"operator":":\u003d","function_call_args":{"arguments":{"named_arguments":{"argument":{"name":"string","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"lin"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"startIndex","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"name":{"name":"Modelica.Utilities.Strings.length"},"function_call_args":{"arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"string"}}]}}]}}}}}}}}}}}]}},{"factor":{"primarys":[{"simple_primary":"1"}]}}],"adds":[{"add_op":"+"}]}}}}}}}}},"arguments":{"argument":{"name":"requiredDelimiters","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"function_arguments":{"argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003d\""}]}}]}}}}}}}}}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"message","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"Failed to find \u0027\u003d\u0027 when reading peak load in \u0027\""}]}},{"factor":{"primarys":[{"component_reference":{"component":"filNam"}}]}},{"factor":{"primarys":[{"simple_primary":"\"\u0027.\""}]}}],"adds":[{"add_op":"+"},{"add_op":"+"}]}}}}}}}}}}}}}}},"output_expression_list":{"expression":[{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"del"}}]}}]}}}}}}},{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"nexInd"}}]}}]}}}}}}}]},"comment":{"comment":{}}},{"component_reference":{"component":"number"},"operator":":\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"name":{"name":"Modelica.Utilities.Strings.scanReal"},"function_call_args":{"arguments":{"named_arguments":{"argument":{"name":"string","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"lin"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"startIndex","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"component_reference":{"component":"nexInd"}}]}}]}}}}}}}}},"arguments":{"argument":{"name":"message","argument":{"expressions":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"Failed to read double value when reading peak load in \u0027\""}]}},{"factor":{"primarys":[{"component_reference":{"component":"filNam"}}]}},{"factor":{"primarys":[{"simple_primary":"\"\u0027.\""}]}}],"adds":[{"add_op":"+"},{"add_op":"+"}]}}}}}}}}}}}}}}}]}}]}}}}}}},"comment":{"comment":{}}}]}],"comp_annotation":{"prefix":"annotation","annotation":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"Documentation"},"modification":{"class_modification":{"argument_list":{"argument":[{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"info"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cp\u003e\nFunction that reads a double value from a text file.\n\u003c/p\u003e\n\u003cp\u003e\nThis function scans a file that has a format such as\n\u003c/p\u003e\n\u003cpre\u003e\n#1\n#Some other text\n#Peak space cooling load \u003d -383165.6989 Watts\n#Peak space heating load \u003d 893931.4335 Watts\ndouble tab1(8760,4)\n0,0,5972.314925,16\n3600,0,4925.839944,1750.915684\n...\n\u003c/pre\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003estring\u003c/code\u003e is a string that the function\nsearches for, starting at the first line.\nIf it finds the string, it expects an equality sign, and\nreturns the double value after this equality sign.\nIf the function encounters the end of the file, it\nterminates the simulation with an assertion.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Experimental.DistrictHeatingCooling.SubStations.VaporCompression.BaseClasses.Validation.GetPeakLoad\\\"\u003e\nBuildings.Experimental.DistrictHeatingCooling.SubStations.VaporCompression.BaseClasses.Validation.GetPeakLoad\u003c/a\u003e\nfor how to invoke this function.\n\u003c/p\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}},{"element_modification_or_replaceable":{"element_modification":{"name":{"name":"revisions"},"modification":{"symbol":"\u003d","expression":{"simple_expression":{"expression1":{"logical_term":{"logical_factor":{"relation":{"expression1":{"terms":[{"factor":{"primarys":[{"simple_primary":"\"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nDecember 1, 2015, by Michael Wetter:\u003cbr/\u003e\nFirst implementation.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}]}}]}}}}}}}},"comment":{}}}}]}}},"comment":{}}}}]}}}}}}}]}